<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_data_broker_transform">
    <sys_ux_data_broker_transform action="DELETE">
        <acl_failure_result/>
        <api_name>global.Invoice manipulate evam data</api_name>
        <description>It will update the evam data to include the last updated comment as subtitle in evam cards</description>
        <mutates_server_data>false</mutates_server_data>
        <name>Invoice manipulate evam data</name>
        <output_schema/>
        <private>false</private>
        <props>[&#13;
{&#13;
  "name": "evam_data",&#13;
  "label": "Evam data",&#13;
  "description": "Transformed fetch evam data output",&#13;
  "readOnly": false,&#13;
  "fieldType": "object",&#13;
  "mandatory": true,&#13;
  "defaultValue": ""&#13;
},&#13;
{&#13;
  "name": "report_ranges",&#13;
  "label": "Report ranges",&#13;
  "description": "Report ranges defined on task sla - actual time left",&#13;
  "readOnly": false,&#13;
  "fieldType": "object",&#13;
  "mandatory": true,&#13;
  "defaultValue": ""&#13;
},&#13;
{&#13;
    "name": "elementId",&#13;
    "label": "Element Id",&#13;
    "description": "Element id of clicked component",&#13;
    "readOnly": false,&#13;
    "fieldType": "string",&#13;
    "mandatory": true,&#13;
    "defaultValue": ""&#13;
  },&#13;
{&#13;
    "name": "fieldName",&#13;
    "label": "Group By Field",&#13;
    "description": "Group By Field of clicked component",&#13;
    "readOnly": false,&#13;
    "fieldType": "string",&#13;
    "mandatory": false,&#13;
    "defaultValue": ""&#13;
  }&#13;
]</props>
        <required_translations>[ {
  "message" : "Element Id",
  "comment" : ""
}, {
  "message" : "Element id of clicked component",
  "comment" : ""
}, {
  "message" : "Evam data",
  "comment" : ""
}, {
  "message" : "Group By Field",
  "comment" : ""
}, {
  "message" : "Group By Field of clicked component",
  "comment" : ""
}, {
  "message" : "Report ranges",
  "comment" : ""
}, {
  "message" : "Report ranges defined on task sla - actual time left",
  "comment" : ""
}, {
  "message" : "Transformed fetch evam data output",
  "comment" : ""
} ]</required_translations>
        <schema_version>1.0.0</schema_version>
        <script><![CDATA[function transform(input) {
    try {
        if (input.evam_data.items.length == 0)
            return input.evam_data;

        var elementId = input.elementId;
        var items = input.evam_data.items;
        var table = items[0].propValues.model.table;
        var field;

        if (input.fieldName)
            field = input.fieldName;
        else {
            if (table === 'incident') {
                if (elementId == 'incident_assigned' || elementId == 'view_all_inc_assigned' || elementId == 'view_all_inc_assigned_group')
                    field = 'state';
                else if (elementId == 'unassigned_incidents' || elementId == 'view_all_unassigned_inc' || elementId == 'view_all_unassigned_inc_group')
                    field = 'priority';
            } else if (table === 'sc_task' || table === 'invoice') {
                field = 'state';
            } else {
                field = 'priority';
            }
        }

        var sowIncidentLandingPageUtility = new SOWIncidentLandingPageUtility();
        var reportRangeColorMap = sowIncidentLandingPageUtility.REPORT_RANGES_COLORS;

        var reportRanges = input.report_ranges;
        var sysIdsList = [];

        for (var index in items) {
            var item = items[index];
            var tableName, journalType;
            if (table === 'sc_task')
                tableName = "sc_task", journalType = "work_notes";
            else
                tableName = "incident", journalType = "comments";
            var journalEntry = fetchJournalEntry(item, tableName, journalType);
            item.propValues.subtitle = journalEntry ? item.propValues.subtitle + ' - ' + journalEntry : item.propValues.subtitle;
            sysIdsList.push(item.propValues.model.sys_id);
        }

        if (table === 'task_sla') {
            var slaDetails = populateSLADetails(sysIdsList, reportRanges);
            for (var index in items) {
                var item = items[index];
                if (slaDetails[item.propValues.model.sys_id]) {
                    var actualTimeLeftDisplayValue = item.propValues.highlightedHeaderLabel;
                    item.propValues.highlightedHeaderBkgColor = slaDetails[item.propValues.model.sys_id]["color"];
                    var slaTimeLeftLabelForEvamCard = sowIncidentLandingPageUtility.getSLATimeLeftLabelValueForEvamCard(table, slaDetails[item.propValues.model.sys_id]["targetType"], actualTimeLeftDisplayValue, slaDetails[item.propValues.model.sys_id]["hasBreached"]);
                    item.propValues.highlightedHeaderLabel = slaTimeLeftLabelForEvamCard["label"];
                }
            }
            return input.evam_data;
        }

        var sysIdFieldValueMap = fetchActualFieldValueForItems(table, field, sysIdsList);
        var chartColors = sowIncidentLandingPageUtility.CHART_COLORS[table][field];
        if (table === 'incident') {
            for (var index in items) {
                var item = items[index];
                var slaDetails = fetchSLAAboutToBreach(item);
                if (slaDetails) {
                    var actualTimeLeftDisplayValue = slaDetails["actualTimeLeft"];
                    var incidentTimeLeftLabelValueForEvamCard = sowIncidentLandingPageUtility.getSLATimeLeftLabelValueForEvamCard(table, slaDetails["targetType"], actualTimeLeftDisplayValue, slaDetails["hasBreached"]);
                    if (elementId == 'unassigned_incidents' || elementId == 'view_all_unassigned_inc' || field == 'priority') {
                        item.propValues.detailLabelOne = incidentTimeLeftLabelValueForEvamCard["label"];
                        item.propValues.detailValueOne = incidentTimeLeftLabelValueForEvamCard["value"];
                    } else {
                        item.propValues.detailLabelTwo = incidentTimeLeftLabelValueForEvamCard["label"];
                        item.propValues.detailValueTwo = incidentTimeLeftLabelValueForEvamCard["value"];
                    }
                    item.propValues.detailValueThree = slaDetails["name"];
                }
                item.propValues.highlightedHeaderBkgColor = chartColors[sysIdFieldValueMap[item.propValues.model.sys_id]];
            }
            return input.evam_data;
        }

        if (table === 'sc_task') {
            for (var index in items) {
                var item = items[index];
                item.propValues.highlightedHeaderBkgColor = chartColors[sysIdFieldValueMap[item.propValues.model.sys_id]];
            }
            return input.evam_data;
        }
    } catch (error) {
        gs.error("Data Broker Transform: Service desk manipulate evam data: " + error);
        return input.evam_data;
    }

    function fetchJournalEntry(item, tableName, journalType) {
        var gr = new GlideRecord('sys_journal_field');
        if (item.propValues.model.table === 'task_sla') {
            var grSQ = gr.addJoinQuery('incident', 'element_id', 'sys_id');
            grSQ.addCondition('number', '=', item.propValues.model["task.number"]);
        } else
            gr.addQuery('element_id', item.propValues.model.sys_id);
        gr.addQuery('name', tableName);
        gr.addQuery('element', journalType);
        gr.orderByDesc('sys_created_on');
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            return gr.value.getDisplayValue();
        }
        return '';
    }

    function populateSLADetails(sysIdsList, reportRanges) {
        var slaDetailsMap = {};
        var sysIds = sysIdsList.join(',');
        var gr = new GlideRecord('task_sla');
        gr.addQuery('sys_id', 'IN', sysIds);
        gr.query();
        while (gr.next()) {
            var reportRangeLabel = fetchReportRangeLabelForSLA(gr.time_left, reportRanges);
            if (!slaDetailsMap[gr.sys_id]) {
                slaDetailsMap[gr.sys_id] = {
                    "color": reportRangeColorMap[reportRangeLabel],
                    "targetType": gr.sla.getRefRecord().getValue('target'),
                    "hasBreached": gr.getValue('has_breached')
                };
            }
        }
        return slaDetailsMap;
    }

    function fetchReportRangeLabelForSLA(timeLeft, reportRanges) {
        var actualTimeLeftDuration = new GlideDuration();
        actualTimeLeftDuration.setValue(timeLeft);
        for (var range in reportRanges) {
            var rangeUpperDuration = new GlideDuration();
            rangeUpperDuration.setValue(reportRanges[range]["upper_value_duration"]);
            if (rangeUpperDuration.compareTo(actualTimeLeftDuration) >= 0) {
                return reportRanges[range]["upper_value_duration"];
            }
        }
        return "";
    }

    function fetchSLAAboutToBreach(item) {
        var slaDetails = {
            "name": "",
            "actualTimeLeft": "",
            "targetType": "",
            "hasBreached": false
        };
        var gr = new GlideRecord('task_sla');
        gr.addActiveQuery();
        gr.addQuery('task', item.propValues.model.sys_id);
        gr.orderBy('time_left');
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            slaDetails["name"] = gr.sla.getDisplayValue();
            slaDetails["actualTimeLeft"] = gr.time_left.getDisplayValue();
            slaDetails["targetType"] = gr.sla.getRefRecord().getValue('target');
            slaDetails["hasBreached"] = gr.getValue('has_breached');
            return slaDetails;
        }
        return null;
    }

    function fetchActualFieldValueForItems(table, fieldName, sysIds) {
        var sysIdFieldValueMap = {};
        var gr = new GlideRecord(table);
        gr.addQuery('sys_id', 'IN', sysIds);
        gr.query();
        while (gr.next()) {
            if (!sysIdFieldValueMap[gr.sys_id])
                sysIdFieldValueMap[gr.sys_id] = gr.getValue(fieldName);
        }
        return sysIdFieldValueMap;
    }
}]]></script>
        <sys_class_name>sys_ux_data_broker_transform</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-01-09 15:36:29</sys_created_on>
        <sys_id>fa4398a11b10a1148c5143f3cc4bcb79</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Invoice manipulate evam data</sys_name>
        <sys_package display_value="Invoice Portal" source="d778dcbd1b6ec9d08c5143f3cc4bcbb2">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Invoice Portal">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_scope>
        <sys_update_name>sys_ux_data_broker_transform_fa4398a11b10a1148c5143f3cc4bcb79</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-01-09 15:37:20</sys_updated_on>
    </sys_ux_data_broker_transform>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Invoice Portal">d778dcbd1b6ec9d08c5143f3cc4bcbb2</application>
        <file_path/>
        <instance_id>37412023db6dd890ad8dd7c8f49619a0</instance_id>
        <instance_name>apigroupdev</instance_name>
        <name>sys_ux_data_broker_transform_fa4398a11b10a1148c5143f3cc4bcb79</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_data_broker_transform"&gt;&lt;sys_ux_data_broker_transform action="INSERT_OR_UPDATE"&gt;&lt;acl_failure_result/&gt;&lt;api_name&gt;global.Invoice manipulate evam data&lt;/api_name&gt;&lt;description&gt;It will update the evam data to include the last updated comment as subtitle in evam cards&lt;/description&gt;&lt;mutates_server_data&gt;false&lt;/mutates_server_data&gt;&lt;name&gt;Invoice manipulate evam data&lt;/name&gt;&lt;output_schema/&gt;&lt;private&gt;false&lt;/private&gt;&lt;props&gt;[&amp;#13;
{&amp;#13;
  "name": "evam_data",&amp;#13;
  "label": "Evam data",&amp;#13;
  "description": "Transformed fetch evam data output",&amp;#13;
  "readOnly": false,&amp;#13;
  "fieldType": "object",&amp;#13;
  "mandatory": true,&amp;#13;
  "defaultValue": ""&amp;#13;
},&amp;#13;
{&amp;#13;
  "name": "report_ranges",&amp;#13;
  "label": "Report ranges",&amp;#13;
  "description": "Report ranges defined on task sla - actual time left",&amp;#13;
  "readOnly": false,&amp;#13;
  "fieldType": "object",&amp;#13;
  "mandatory": true,&amp;#13;
  "defaultValue": ""&amp;#13;
},&amp;#13;
{&amp;#13;
    "name": "elementId",&amp;#13;
    "label": "Element Id",&amp;#13;
    "description": "Element id of clicked component",&amp;#13;
    "readOnly": false,&amp;#13;
    "fieldType": "string",&amp;#13;
    "mandatory": true,&amp;#13;
    "defaultValue": ""&amp;#13;
  },&amp;#13;
{&amp;#13;
    "name": "fieldName",&amp;#13;
    "label": "Group By Field",&amp;#13;
    "description": "Group By Field of clicked component",&amp;#13;
    "readOnly": false,&amp;#13;
    "fieldType": "string",&amp;#13;
    "mandatory": false,&amp;#13;
    "defaultValue": ""&amp;#13;
  }&amp;#13;
]&lt;/props&gt;&lt;required_translations&gt;[ {
  "message" : "Element Id",
  "comment" : ""
}, {
  "message" : "Element id of clicked component",
  "comment" : ""
}, {
  "message" : "Evam data",
  "comment" : ""
}, {
  "message" : "Group By Field",
  "comment" : ""
}, {
  "message" : "Group By Field of clicked component",
  "comment" : ""
}, {
  "message" : "Report ranges",
  "comment" : ""
}, {
  "message" : "Report ranges defined on task sla - actual time left",
  "comment" : ""
}, {
  "message" : "Transformed fetch evam data output",
  "comment" : ""
} ]&lt;/required_translations&gt;&lt;schema_version&gt;1.0.0&lt;/schema_version&gt;&lt;script&gt;&lt;![CDATA[function transform(input) {
    try {
        if (input.evam_data.items.length == 0)
            return input.evam_data;

        var elementId = input.elementId;
        var items = input.evam_data.items;
        var table = items[0].propValues.model.table;
        var field;

        if (input.fieldName)
            field = input.fieldName;
        else {
            if (table === 'incident') {
                if (elementId == 'incident_assigned' || elementId == 'view_all_inc_assigned' || elementId == 'view_all_inc_assigned_group')
                    field = 'state';
                else if (elementId == 'unassigned_incidents' || elementId == 'view_all_unassigned_inc' || elementId == 'view_all_unassigned_inc_group')
                    field = 'priority';
            } else if (table === 'sc_task' || table === 'invoice') {
                field = 'state';
            } else {
                field = 'priority';
            }
        }

        var sowIncidentLandingPageUtility = new SOWIncidentLandingPageUtility();
        var reportRangeColorMap = sowIncidentLandingPageUtility.REPORT_RANGES_COLORS;

        var reportRanges = input.report_ranges;
        var sysIdsList = [];

        for (var index in items) {
            var item = items[index];
            var tableName, journalType;
            if (table === 'sc_task')
                tableName = "sc_task", journalType = "work_notes";
            else
                tableName = "incident", journalType = "comments";
            var journalEntry = fetchJournalEntry(item, tableName, journalType);
            item.propValues.subtitle = journalEntry ? item.propValues.subtitle + ' - ' + journalEntry : item.propValues.subtitle;
            sysIdsList.push(item.propValues.model.sys_id);
        }

        if (table === 'task_sla') {
            var slaDetails = populateSLADetails(sysIdsList, reportRanges);
            for (var index in items) {
                var item = items[index];
                if (slaDetails[item.propValues.model.sys_id]) {
                    var actualTimeLeftDisplayValue = item.propValues.highlightedHeaderLabel;
                    item.propValues.highlightedHeaderBkgColor = slaDetails[item.propValues.model.sys_id]["color"];
                    var slaTimeLeftLabelForEvamCard = sowIncidentLandingPageUtility.getSLATimeLeftLabelValueForEvamCard(table, slaDetails[item.propValues.model.sys_id]["targetType"], actualTimeLeftDisplayValue, slaDetails[item.propValues.model.sys_id]["hasBreached"]);
                    item.propValues.highlightedHeaderLabel = slaTimeLeftLabelForEvamCard["label"];
                }
            }
            return input.evam_data;
        }

        var sysIdFieldValueMap = fetchActualFieldValueForItems(table, field, sysIdsList);
        var chartColors = sowIncidentLandingPageUtility.CHART_COLORS[table][field];
        if (table === 'incident') {
            for (var index in items) {
                var item = items[index];
                var slaDetails = fetchSLAAboutToBreach(item);
                if (slaDetails) {
                    var actualTimeLeftDisplayValue = slaDetails["actualTimeLeft"];
                    var incidentTimeLeftLabelValueForEvamCard = sowIncidentLandingPageUtility.getSLATimeLeftLabelValueForEvamCard(table, slaDetails["targetType"], actualTimeLeftDisplayValue, slaDetails["hasBreached"]);
                    if (elementId == 'unassigned_incidents' || elementId == 'view_all_unassigned_inc' || field == 'priority') {
                        item.propValues.detailLabelOne = incidentTimeLeftLabelValueForEvamCard["label"];
                        item.propValues.detailValueOne = incidentTimeLeftLabelValueForEvamCard["value"];
                    } else {
                        item.propValues.detailLabelTwo = incidentTimeLeftLabelValueForEvamCard["label"];
                        item.propValues.detailValueTwo = incidentTimeLeftLabelValueForEvamCard["value"];
                    }
                    item.propValues.detailValueThree = slaDetails["name"];
                }
                item.propValues.highlightedHeaderBkgColor = chartColors[sysIdFieldValueMap[item.propValues.model.sys_id]];
            }
            return input.evam_data;
        }

        if (table === 'sc_task') {
            for (var index in items) {
                var item = items[index];
                item.propValues.highlightedHeaderBkgColor = chartColors[sysIdFieldValueMap[item.propValues.model.sys_id]];
            }
            return input.evam_data;
        }
    } catch (error) {
        gs.error("Data Broker Transform: Service desk manipulate evam data: " + error);
        return input.evam_data;
    }

    function fetchJournalEntry(item, tableName, journalType) {
        var gr = new GlideRecord('sys_journal_field');
        if (item.propValues.model.table === 'task_sla') {
            var grSQ = gr.addJoinQuery('incident', 'element_id', 'sys_id');
            grSQ.addCondition('number', '=', item.propValues.model["task.number"]);
        } else
            gr.addQuery('element_id', item.propValues.model.sys_id);
        gr.addQuery('name', tableName);
        gr.addQuery('element', journalType);
        gr.orderByDesc('sys_created_on');
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            return gr.value.getDisplayValue();
        }
        return '';
    }

    function populateSLADetails(sysIdsList, reportRanges) {
        var slaDetailsMap = {};
        var sysIds = sysIdsList.join(',');
        var gr = new GlideRecord('task_sla');
        gr.addQuery('sys_id', 'IN', sysIds);
        gr.query();
        while (gr.next()) {
            var reportRangeLabel = fetchReportRangeLabelForSLA(gr.time_left, reportRanges);
            if (!slaDetailsMap[gr.sys_id]) {
                slaDetailsMap[gr.sys_id] = {
                    "color": reportRangeColorMap[reportRangeLabel],
                    "targetType": gr.sla.getRefRecord().getValue('target'),
                    "hasBreached": gr.getValue('has_breached')
                };
            }
        }
        return slaDetailsMap;
    }

    function fetchReportRangeLabelForSLA(timeLeft, reportRanges) {
        var actualTimeLeftDuration = new GlideDuration();
        actualTimeLeftDuration.setValue(timeLeft);
        for (var range in reportRanges) {
            var rangeUpperDuration = new GlideDuration();
            rangeUpperDuration.setValue(reportRanges[range]["upper_value_duration"]);
            if (rangeUpperDuration.compareTo(actualTimeLeftDuration) &gt;= 0) {
                return reportRanges[range]["upper_value_duration"];
            }
        }
        return "";
    }

    function fetchSLAAboutToBreach(item) {
        var slaDetails = {
            "name": "",
            "actualTimeLeft": "",
            "targetType": "",
            "hasBreached": false
        };
        var gr = new GlideRecord('task_sla');
        gr.addActiveQuery();
        gr.addQuery('task', item.propValues.model.sys_id);
        gr.orderBy('time_left');
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            slaDetails["name"] = gr.sla.getDisplayValue();
            slaDetails["actualTimeLeft"] = gr.time_left.getDisplayValue();
            slaDetails["targetType"] = gr.sla.getRefRecord().getValue('target');
            slaDetails["hasBreached"] = gr.getValue('has_breached');
            return slaDetails;
        }
        return null;
    }

    function fetchActualFieldValueForItems(table, fieldName, sysIds) {
        var sysIdFieldValueMap = {};
        var gr = new GlideRecord(table);
        gr.addQuery('sys_id', 'IN', sysIds);
        gr.query();
        while (gr.next()) {
            if (!sysIdFieldValueMap[gr.sys_id])
                sysIdFieldValueMap[gr.sys_id] = gr.getValue(fieldName);
        }
        return sysIdFieldValueMap;
    }
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_ux_data_broker_transform&lt;/sys_class_name&gt;&lt;sys_created_by&gt;Terry.Lillo&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-01-09 15:36:29&lt;/sys_created_on&gt;&lt;sys_id&gt;fa4398a11b10a1148c5143f3cc4bcb79&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Invoice manipulate evam data&lt;/sys_name&gt;&lt;sys_package display_value="Invoice Portal" source="d778dcbd1b6ec9d08c5143f3cc4bcbb2"&gt;d778dcbd1b6ec9d08c5143f3cc4bcbb2&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Invoice Portal"&gt;d778dcbd1b6ec9d08c5143f3cc4bcbb2&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ux_data_broker_transform_fa4398a11b10a1148c5143f3cc4bcb79&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Terry.Lillo&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-01-09 15:37:20&lt;/sys_updated_on&gt;&lt;/sys_ux_data_broker_transform&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1235193605</payload_hash>
        <record_name>Invoice manipulate evam data</record_name>
        <reverted_from/>
        <source>5ba6dba71b4691108c5143f3cc4bcb2a</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-01-09 15:37:20</sys_created_on>
        <sys_id>ee835c611b10a1148c5143f3cc4bcbbc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>185972dd1d80000001</sys_recorded_at>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-01-09 15:37:20</sys_updated_on>
        <type>Data Broker Server Script</type>
        <update_guid>26835c61f210a114ac78caf078cfc9bc</update_guid>
        <update_guid_history>26835c61f210a114ac78caf078cfc9bc:-1235193605,c253d8a18510a114baa9086d32bdc0be:-214478615</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-01-09 15:39:07</sys_created_on>
        <sys_db_object display_value="" name="sys_ux_data_broker_transform">sys_ux_data_broker_transform</sys_db_object>
        <sys_id>47b4c08344a44690ab83ada661f0a240</sys_id>
        <sys_metadata>fa4398a11b10a1148c5143f3cc4bcb79</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Invoice manipulate evam data</sys_name>
        <sys_package display_value="Invoice Portal" source="d778dcbd1b6ec9d08c5143f3cc4bcbb2">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Invoice Portal">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_scope>
        <sys_scope_delete display_value="">455b831530c04caaac24db1349c775a4</sys_scope_delete>
        <sys_update_name>sys_ux_data_broker_transform_fa4398a11b10a1148c5143f3cc4bcb79</sys_update_name>
        <sys_update_version display_value="sys_ux_data_broker_transform_fa4398a11b10a1148c5143f3cc4bcb79">ee835c611b10a1148c5143f3cc4bcbbc</sys_update_version>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-01-09 15:39:07</sys_updated_on>
    </sys_metadata_delete>
</record_update>
