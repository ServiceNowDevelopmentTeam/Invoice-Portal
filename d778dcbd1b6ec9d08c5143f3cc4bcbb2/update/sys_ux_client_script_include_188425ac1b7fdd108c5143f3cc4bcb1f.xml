<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script_include">
    <sys_ux_client_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <api_name>global.SowInvoiceLandingPageUtils</api_name>
        <includes/>
        <name>SowInvoiceLandingPageUtils</name>
        <required_translations/>
        <script><![CDATA[function include({imports}) { 
    class SowInvoiceLandingPageUtils{

        /**
         * Returns visualization configs
         * @param {object} helpers
         * @param {string} mode
         * @return object
         */
        static async getVisualizationConfig(helpers, mode) {
            const evamDef = this.getEvamDef();
            const visualizationConfig = [{
                    "id": "invoice_open",
                    "tableName": "u_invoice",
                    "tableDisplayValue": "invoice",
                    "myWorkQuery": "active=true",
                    "myTeamQuery": "active=true",
                    "listView": mode == "your_work" ? "sow_landing_page_assigned" : "sow_landing_page",
                    "header": await helpers.translate("Open Invoices"),
                    "groupByField": "state",
                    "evamId": evamDef['invoiceEvamDefinitionId'],
                    "updated_on": "^ORDERBYDESCsys_updated_on",
                },{
                    "id": "invoice_all",
                    "tableName": "u_invoice",
                    "tableDisplayValue": "invoice",
                    "myWorkQuery": "",
                    "myTeamQuery": "",
                    "listView": mode == "your_work" ? "sow_landing_page_assigned" : "sow_landing_page",
                    "header": await helpers.translate("All Invoices"),
                    "groupByField": "state",
                    "evamId": evamDef['invoiceEvamDefinitionId'],
                    "updated_on": "^ORDERBYDESCsys_updated_on",
                },{
                    "id": "task_assigned",
                    "tableName": "task",
                    "tableDisplayValue": "Task",
                    "myWorkQuery": "active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe",
                    "myTeamQuery": "active=true^assigned_toISNOTEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744",
                    "listView": mode == "your_work" ? "sow_landing_page_assigned" : "sow_landing_page",
                    "header": mode == 'your_work' ? await helpers.translate("Tasks assigned to me") : await helpers.translate("Tasks assigned to my team"),
                    "groupByField": "state",
                    "evamId": evamDef['taskEvamDefinitionId'],
                    "updated_on": "^ORDERBYDESCsys_updated_on",
                },/*
                {
                    "id": "task_sla",
                    "tableName": "task_sla",
                    "tableDisplayValue": "Task SLA",
                    "myWorkQuery": "task.sys_class_name=task^task.assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^task.active=true^sla.type=SLA^ORsla.type=OLA^active=true^time_left<=1970-01-08 00:00:00",
                    "myTeamQuery": "task.sys_class_name=task^task.assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^task.active=true^sla.type=SLA^ORsla.type=OLA^active=true^time_left<=1970-01-08 00:00:00",
                    "listView": 'sow_landing_page',
                    "header": await helpers.translate("Task SLAs"),
                    "groupByField": "time_left",
                    "evamId": evamDef['taskSlaEvamDefinitionId'],
                    "updated_on": "^ORDERBYtime_left",
                },
                {
                    "id": "unassigned_tasks",
                    "tableName": "task",
                    "tableDisplayValue": "task",
                    "myWorkQuery": "active=true^assigned_toISEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744",
                    "myTeamQuery": "active=true^assigned_toISEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744",
                    "listView": mode == "your_work" ? "sow_landing_page_assigned" : "sow_landing_page",
                    "header": await helpers.translate("Unassigned Tasks"),
                    "groupByField": "priority",
                    "evamId": evamDef['taskEvamDefinitionId'],
                    "updated_on": "^ORDERBYDESCsys_updated_on",
                }*/];

            return visualizationConfig;
        }

        /**
         * Build visualization card configurations (Donut)
         * @param {object} helpers
         * @param {string} mode
         * @return object
         */
        static async getDonutConfig(helpers, mode) {
            var donutConfig = [];
            var visualizationConfig = await this.getVisualizationConfig(helpers, mode);

            for (var i = 0; i < visualizationConfig.length; i++) {
                var obj = {};
                obj = {
                    "id": visualizationConfig[i].id,
                    "header": visualizationConfig[i].header,
                    "evamId": visualizationConfig[i].evamId,
                    "updated_on": visualizationConfig[i]["updated_on"],
                    "listView": visualizationConfig[i].listView,
                    "datasource": [{
                        "isDatabaseView": false,
                        "allowRealTime": true,
                        "sourceType": "table",
                        "label": {
                            "message": visualizationConfig[i].tableDisplayValue
                        },
                        "tableOrViewName": visualizationConfig[i].tableName,
                        "filterQuery": mode == 'your_work' ? visualizationConfig[i].myWorkQuery : visualizationConfig[i].myTeamQuery,
                        "id": visualizationConfig[i].id
                    }],
                    "metric": [{
                        "dataSource": visualizationConfig[i].id,
                        "id": visualizationConfig[i].id + "metric",
                        "aggregateFunction": "COUNT",
                        "numberFormat": {
                            "customFormat": false
                        },
                        "axisId": "primary"
                    }],
                    "groupBy": [{
                        "maxNumberOfGroups": "ALL",
                        "numberOfGroupsBasedOn": "NO_OF_GROUP_BASED_ON_PER_METRIC",
                        "showOthers": false,
                        "hideZeroValues": true,
                        "groupBy": [{
                            "dataSource": visualizationConfig[i].id,
                            "groupByField": visualizationConfig[i].groupByField,
                            "isRange": false,
                            "isPaBucket": false
                        }]
                    }]
                };
                donutConfig.push(obj);
            }

            return donutConfig;
        }

        static getEvamDef() {
            const evamDef = {
                'invoiceEvamDefinitionId': 'a95b9a4d1bff155062e50ed2cd4bcbfa',
                'taskEvamDefinitionId': '01a404e8b7203010e69dbc16de11a93f',
                'taskSlaEvamDefinitionId': '749b857eb7283010e69dbc16de11a98d',
                'catalogTaskEvamDefinitionId': '4a59c876c7323010d7e818b1c7c26083'
            };
            return evamDef;
        }

        /**
         * Returns configuration for work persona dropdown
         * @param {object} helpers
         * @return {object}
         */
        static async getWorkPersonaConfig(helpers) {
            return {
                "items": [{
                        "id": "your_work",
                        "label": await helpers.translate("My work")
                    },
                    {
                        "id": "your_team_work",
                        "label": await helpers.translate("My team's work")
                    }],
                "defaultSelected": ["your_work"]
            }
        }

        static getRangeObject(query, key) {
            var ans = {}
            var queryTokens = query.split('^');
            for (var index in queryTokens) {
                var token = queryTokens[index];
                if (token.indexOf(key) == -1)
                    continue;
                token = token.replace('=', '');
                if (token.indexOf('<') != -1)
                    ans.end_value = token.substring(token.indexOf('<') + 1)
                else
                    ans.start_value = token.substring(token.indexOf('>') + 1)
            }
            return ans;
        }

        static async getSLAHeader(range, report_ranges, helpers) {
            for (var index in report_ranges) {
                if (range.end_value == report_ranges[index].upper_value_duration)
                    return (await helpers.translate("invoice SLA time remaining - {0}", report_ranges[index].label));
            }
            return (await helpers.translate('invoice SLAs'));
        }

        static getFieldMap() {
            const fieldMap = {
                'State': 'state',
                'Priority': 'priority',
                'Actual time left': 'time_left'
            };
            return fieldMap;
        }

        static async fetchTitleForSLA(query, reportRanges, helpers) {
            var range = this.getRangeObject(query, 'time_left');
            return (await this.getSLAHeader(range, reportRanges, helpers));
        }

        static async fetchTitle(table, nameValueMap, groupByLabel, groupMode = false) {
            const groupByField = this.getFieldMap()[groupByLabel];
            return this.getLabelMaps(table, nameValueMap[groupByField], groupByField, groupMode);
        }

        static getLabelMaps(table, selectedField, groupByField, groupMode = false) {
            const labelMap = {
                'task': {
                    'state': {
                        '1': 'New tasks',
                        '2': 'In Progress tasks',
                        '3': 'On Hold tasks',
                        '6': 'Resolved tasks'
                    }
                },
                'u_invoice': {
                    'state': {
                        '1': 'New invoices',
                        '2': 'In Progress invoices',
                        '3': 'On Hold invoices',
                        '6': 'Resolved invoices',
                       '51':'Under Review invoices',
                       '52':'Waiting for Approval invoices'
                    }
                },
                'u_invoice_task': {
                    'state': {
                        '1': 'New invoices',
                        '2': 'In Progress invoices',
                        '3': 'On Hold invoices',
                        '6': 'Resolved invoices',
                       '51':'Under Review invoices',
                       '52':'Waiting for Approval invoices'
                    }
                },
                'sc_task': {
                    'state': {
                        '-5': 'Pending catalog invoices',
                        '1': 'Open catalog invoices',
                        '2': 'Work in progress catalog invoices'
                    }
                }
            };

            if (groupMode)
                return labelMap[table][groupByField][selectedField] + ' assigned to my team';
            return labelMap[table][groupByField][selectedField] + ' assigned to me';
        }

        static async getVisualisationCardConfig(id, helpers, mode) {
            var visualizationConfig = await this.getVisualizationConfig(helpers, mode);
            var currentVizSelection = {};
            for (var i = 0; i < visualizationConfig.length; i++) {
                if (visualizationConfig[i].id === id) {
                    currentVizSelection.table = visualizationConfig[i].tableName;
                    currentVizSelection.query = mode === "your_team_work" ? visualizationConfig[i].myTeamQuery + visualizationConfig[i]["updated_on"] : visualizationConfig[i].myWorkQuery + visualizationConfig[i]["updated_on"];
                    currentVizSelection.evamId = visualizationConfig[i].evamId;
                    currentVizSelection.elementId = visualizationConfig[i].id;
                    currentVizSelection.title = visualizationConfig[i].header;
                    currentVizSelection.groupByField = visualizationConfig[i].groupByField;
                    currentVizSelection.listView = visualizationConfig[i].listView;
                    break;
                }
            }
            return currentVizSelection;
        }

        static async getVisualisationCardQuery(vizSelection, nameValueMap, helpers, mode) {
            var field = this.getFieldMap()[vizSelection.groupBy];
            var value = nameValueMap[field];
            var query = '';
            var visualizationConfig = await this.getVisualizationConfig(helpers, mode);
            for (var i = 0; i < visualizationConfig.length; i++) {
                if (visualizationConfig[i].id === vizSelection.elementId) {
                    query = mode === "your_team_work" ? visualizationConfig[i].myTeamQuery : visualizationConfig[i].myWorkQuery;
                    break;
                }
            }
            if (Array.isArray(value)) {
                for (let index in value)
                    query += '^' + field + value[index];
            } else {
                if (value.includes('='))
                    query += '^' + field + value;
                else
                    query += '^' + field + '=' + value;
            }
            return query + visualizationConfig[0]["updated_on"];
        }
    }

    return SowInvoiceLandingPageUtils;
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script_include</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-12-12 22:25:45</sys_created_on>
        <sys_id>188425ac1b7fdd108c5143f3cc4bcb1f</sys_id>
        <sys_mod_count>36</sys_mod_count>
        <sys_name>SowInvoiceLandingPageUtils</sys_name>
        <sys_package display_value="Invoice Portal" source="d778dcbd1b6ec9d08c5143f3cc4bcbb2">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Invoice Portal">d778dcbd1b6ec9d08c5143f3cc4bcbb2</sys_scope>
        <sys_update_name>sys_ux_client_script_include_188425ac1b7fdd108c5143f3cc4bcb1f</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-01-23 19:51:39</sys_updated_on>
    </sys_ux_client_script_include>
</record_update>
